//
// This file is part of the GNU ARM Eclipse distribution.
// Copyright (c) 2014 Liviu Ionescu.
//

// ----------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>
#include "stm32f4xx.h"
#include "diag/Trace.h"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
#pragma GCC diagnostic ignored "-Wreturn-type"

#define LED_NUM (4)

void Hard_PWM(void);
void InitializeTimer(void);
void InitializeLED(GPIO_InitTypeDef*);

TIM_HandleTypeDef Timer;
GPIO_InitTypeDef LED[LED_NUM];

int main(int argc, char* argv[])
{
	while(1)
	{

	}
}

void Hard_PWM(void)
{
//	RCC->CFGR &= ~(RCC_CFGR_SW);
//	RCC->CFGR |= RCC_CFGR_SW_HSE;

	__TIM4_CLK_ENABLE();

	Timer.Instance = TIM2;

	Timer.Init.Prescaler = 0;
	Timer.Init.CounterMode = TIM_COUNTERMODE_UP;
	Timer.Init.Period = 1000;

	HAL_TIM_Base_Init(&Timer);

//	HAL_TIM_Base_Start_IT(&Timer);
}

void InitializeTimer(void)
{
	//	RCC->CFGR &= ~(RCC_CFGR_SW);
	//	RCC->CFGR |= RCC_CFGR_SW_HSE;

	__TIM4_CLK_ENABLE();

	Timer.Instance = TIM2;

	Timer.Init.Prescaler = 0;
	Timer.Init.CounterMode = TIM_COUNTERMODE_UP;
	Timer.Init.Period = 1000;

	HAL_TIM_Base_Init(&Timer);

	//	HAL_TIM_Base_Start_IT(&Timer);
}

void InitializeLED(GPIO_InitTypeDef *L)
{
	int i;

    __GPIOD_CLK_ENABLE();

    L[0].Pin = GPIO_PIN_12;
    L[1].Pin = GPIO_PIN_13;
    L[2].Pin = GPIO_PIN_14;
    L[3].Pin = GPIO_PIN_15;

    for(i = 0; i < LED_NUM; i++)
    {
    	L[i].Mode = GPIO_MODE_AF_PP;
    	L[i].Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    	L[i].Pull = GPIO_NOPULL;
    	//L[i].Alternate = GPIO_AF2_TIM4;
		HAL_GPIO_Init(GPIOD, &L[i]);
    }

    HAL_GPIO_TogglePin(GPIOD, LED[0].Pin);
}

#pragma GCC diagnostic pop

// ----------------------------------------------------------------------------
