#include <stdio.h>
#include <stdlib.h>
#include "stm32f4xx.h"
#include "diag/Trace.h"

#define LED_NUM (4)

void InitPA5(void);
void InitPA1(void);
void ConfigurePins(void);
void ConfigureADC(void);
void ConfigureDAC(void);
void ConfigureTIM2(void);
void ConfigureLED(GPIO_InitTypeDef *L);
void SetDAC(void);
int GetADC(int ADCval);
void SwitchLED(GPIO_InitTypeDef *L, int N);

ADC_HandleTypeDef ADCini;
ADC_ChannelConfTypeDef ADCchan;
DAC_HandleTypeDef DACini;

TIM_HandleTypeDef TIM2ini;
GPIO_InitTypeDef PA5ini, PA1ini;
GPIO_InitTypeDef LED[LED_NUM];

int DACval = 0;

int main()
{
	ConfigurePins();
	ConfigureADC();
	ConfigureDAC();
	ConfigureTIM2();
	ConfigureLED(LED);

	SystemCoreClockUpdate();

	HAL_NVIC_EnableIRQ(TIM2_IRQn);

	while(1)
	{
	}
}

void InitPA5(void)
{
	PA5ini.Pin = GPIO_PIN_5;
	PA5ini.Mode = GPIO_MODE_OUTPUT_PP;
	PA5ini.Speed = GPIO_SPEED_FREQ_LOW;
	PA5ini.Pull = GPIO_NOPULL; //GPIO_PULLUP;

	HAL_GPIO_Init(GPIOA, &PA5ini);

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}

void InitPA1(void)
{
	PA1ini.Pin = GPIO_PIN_1;
	PA1ini.Mode = GPIO_MODE_ANALOG;
	PA1ini.Pull = GPIO_PULLUP;

	HAL_GPIO_Init(GPIOA, &PA1ini);
}

void ConfigurePins(void)
{
	__GPIOA_CLK_ENABLE();

    InitPA5();	// output
    InitPA1();	// input
}

void ConfigureADC(void)
{
    __ADC1_CLK_ENABLE();

    ADCini.Instance = ADC1;
    ADCini.Init.ClockPrescaler = ADC_CLOCKPRESCALER_PCLK_DIV2;
    ADCini.Init.Resolution = ADC_RESOLUTION_8B;
    ADCini.Init.ScanConvMode = DISABLE;
    ADCini.Init.ContinuousConvMode = ENABLE;
    ADCini.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
    ADCini.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
    ADCini.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    ADCini.Init.NbrOfConversion = 1;

    HAL_ADC_Init(&ADCini);

    ADCchan.Channel = ADC_CHANNEL_1;
    ADCchan.Rank = 1;
    ADCchan.SamplingTime = ADC_SAMPLETIME_144CYCLES;
    ADCchan.Offset = 0;

    HAL_ADC_ConfigChannel(&ADCini, &ADCchan);
}

void ConfigureDAC(void)
{
	__DAC_CLK_ENABLE();

	DACini.Instance = DAC;

	HAL_DAC_Init(&DACini);
}

void ConfigureTIM2()
{
//	RCC->CFGR &= ~(RCC_CFGR_SW);
//	RCC->CFGR |= RCC_CFGR_SW_HSE;

	__TIM2_CLK_ENABLE();

	TIM2ini.Instance = TIM2;

	TIM2ini.Init.Prescaler = 4000 - 1;
	TIM2ini.Init.CounterMode = TIM_COUNTERMODE_UP;
	TIM2ini.Init.Period = 1000;

	HAL_TIM_Base_Init(&TIM2ini);
	HAL_TIM_Base_Start_IT(&TIM2ini);
}

void ConfigureLED(GPIO_InitTypeDef *L)
{
	int i;

    __GPIOD_CLK_ENABLE();

    L[0].Pin = GPIO_PIN_12;
    L[1].Pin = GPIO_PIN_13;
    L[2].Pin = GPIO_PIN_14;
    L[3].Pin = GPIO_PIN_15;

    for(i = 0; i < LED_NUM; i++)
    {
    	L[i].Mode = GPIO_MODE_OUTPUT_PP ;
    	L[i].Speed = GPIO_SPEED_HIGH;
    	L[i].Pull = GPIO_NOPULL;

		HAL_GPIO_Init(GPIOD, &L[i]);
    }
}

void SetDAC(void)
{
	HAL_DAC_SetValue(&DACini, DAC_CHANNEL_2, DAC_ALIGN_8B_R, DACval);
	HAL_DAC_Start(&DACini, DAC_CHANNEL_2);

	DACval += 64;
	if(DACval >= 255)
		DACval = 0;
}

int GetADC(int ADCval)
{
	int Y = 0;

	if(!ADCval)
	{
		goto ret;
	}
	else if(ADCval > 0 && ADCval < 64)
	{
		Y = 1;
		goto ret;
	}
	else if(ADCval >= 64 && ADCval < 128)
	{
		Y = 2;
		goto ret;
	}
	else if(ADCval >= 128 && ADCval < 192)
	{
		Y = 3;
		goto ret;
	}
	else if(ADCval >= 192 && ADCval < 256)
	{
		Y = 4;
		goto ret;
	}

ret:
	return Y;
}

void SwitchLED(GPIO_InitTypeDef *L, int N)
{
	int i;

	for(i = 0; i < LED_NUM; i++)
	{
		HAL_GPIO_WritePin(GPIOD, L[i].Pin, GPIO_PIN_RESET);
	}

	for(i = 0; i < N; i++)
	{
		HAL_GPIO_WritePin(GPIOD, L[i].Pin, GPIO_PIN_SET);
	}
}

//Interrupt handlers
//------------------------------------------------------//

void TIM2_IRQHandler(void)
{
	HAL_TIM_IRQHandler(&TIM2ini);

	SetDAC();

	HAL_ADC_Start(&ADCini);
	while(!(ADC1->SR & ADC_SR_EOC));
	SwitchLED(LED, GetADC(ADC1->DR));
}
